pipeline {
  environment {
    registry = "donscumbag/app-golang"
    dockerImage = ''
    gitUrl = 'http://10.111.21.60:3000/malik/app-golang.git'
    gitBranch = 'development'
    registryCredential = 'dockerhub'
  }
  agent any

  stages {
    stage('Cloning Git') {
      steps {
        sh 'rm -rf *'
        git branch: gitBranch,
        credentialsId: 'gitea-malik',
        url: gitUrl
      }
    }

    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
    }

    stage('Deploy Image') {
      steps{
        script {
                docker.withRegistry( '', registryCredential ) {
                dockerImage.push()
          }
        }
      }
    }

    stage('Remove Unused docker image') {
      steps{
        sh "docker rmi $registry:$BUILD_NUMBER"
      }
    }

    stage('Deploy with Docker Compose') {
      steps {
          script {
             // Menggunakan agen SSH
            sshagent(credentials: ['ssh-server-dev']) {
                        // Pindah ke direktori yang berisi docker-compose.yml
                //def remoteCommand = "ssh root@10.111.21.61 'sed -i 's/latest/$env.BUILD_NUMBER/g /root/app-golang/docker-compose.yml && cd /root/app-golang && docker compose up -d'"
                def remoteCommand = "ssh root@10.111.21.61 'echo \"test\" > /root/file2.txt'"
                def remoteStatus = sh(script: remoteCommand, returnStatus: true)

                if (remoteStatus == 0) {
                    echo "Perintah SSH berhasil dijalankan!"
                            // Tampilkan pesan setelah docker-compose up berhasil dijalankan
                    echo "Docker Compose telah dijalankan di server eksternal."
                } else {
                    error "Gagal menjalankan perintah SSH. Status: ${remoteStatus}"
                       }
            }
          }
        }
     }
  }
}
